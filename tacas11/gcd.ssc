using System;
using Microsoft.Contracts;

public class GCD
{
	private int x, y, x0, y0;
	
	public GCD()
	{
	}
    
    [Pure] private int random()
	ensures (result == 0 || result == 1);
	{
		return 0;
	}
	
	[Pure] private int Min(int x, int y)
	ensures x < y ==> result == x;
	ensures y <= x ==> result == y;
	{
		if(x < y) return x;
		else return y;
	}
    
    private void processP2()
    requires 0 < x0 && 0 < y0 && 0 < x && 0 < y && x <= x0 && y <= y0;
    modifies this.x, this.y, this.0;
    ensures x0 == old(x0) && y0 == old(y0) && x == old(x);
    ensures 0 < y && y <= old(y) && (y < old(y) ==> old(y) > old(x));
    ensures forall{g in (1: Min(x0, y0)+1), x0 % g == 0, y0 % g == 0; x % g == 0 && y % g == 0 && g <= x && g <= y};
	{
    
		int x_g, y_g, x0_g, y0_g;
		int z, t1, t2;
		x_g = x;
		y_g = y;
		x0_g = x0;
		y0_g = y0;
		
		x = x0;
		y = y0;
		z = 0;
		
		
			if((z != 1) && (random() == 0))
				processP1();
			if(x == x_g && y == y_g && random() == 0)
				z = 1;
			if(z == 1 && random() == 0)
				return;
		
		t1 = y;
		
			if((z != 1) && (random() == 0))
				processP1();
			if(x == x_g && y == y_g && random() == 0)
				z = 1;
			if(z == 1 && random() == 0)
				return;
		
		t2 = x;
		
			if((z != 1) && (random() == 0))
				processP1();
			if(x == x_g && y == y_g && random() == 0)
				z = 1;
			if(z == 1 && random() == 0)
				return;
		
		while(t1 != t2)
		invariant y0 == y0_g && x0 == x0_g;
   		invariant z == 1 ==> x == x_g;
   		invariant 0 < x0 && 0 < y0 && 0 < x && x <= t2 && t2 <= x0 && 0 < t2 && 0 < y && y == t1 && 0 < t1 && y <= y0;
		invariant z == 1 ==> (y <= y_g && (y < y_g ==> y_g > x_g));
   		invariant forall{g in (1: Min(x0, y0)+1), x0 % g == 0, y0 % g == 0; t1 % g == 0 && t2 % g == 0 && g <= t1 && g <= t2};
   		invariant forall{g in (1: Min(x0, y0)+1), x0 % g == 0, y0 % g == 0; x % g == 0 && y % g == 0 && g <= x && g <= y};
   		{
		 
				if((z != 1) && (random() == 0))
					processP1();
				if(x == x_g && y == y_g && random() == 0)
					z = 1;
				if(z == 1 && random() == 0)
					return;
					
			if(t1 > t2)
			{
			
					if((z != 1) && (random() == 0))
						processP1();
					if(x == x_g && y == y_g && random() == 0)
						z = 1;
					if(z == 1 && random() == 0)
						return;
			
				assert(forall{g in (1: Min(x0, y0)+1), x0 % g == 0, y0 % g == 0; t1 % g == 0 && t2 % g == 0 && x % g == 0 && y % g == 0 && g <= t1 && g <= t2 && g <= x && g <= y});
				t1 = t1 - t2;
				assume(forall{g in (1: Min(x0, y0)+1), x0 % g == 0, y0 % g == 0; t1 % g == 0 && t2 % g == 0 && x % g == 0 && y % g == 0 && g <= t1 && g <= t2 && g <= x && g <= y});
				
					if((z != 1) && (random() == 0))
						processP1();
					if(x == x_g && y == y_g && random() == 0)
						z = 1;
					if(z == 1 && random() == 0)
						return;
				
				y = t1;
				
					if((z != 1) && (random() == 0))
						processP1();
					if(x == x_g && y == y_g && random() == 0)
						z = 1;
					if(z == 1 && random() == 0)
						return;
			
			}
			
			t2 = x;
			
		}
		
			if((z != 1) && (random() == 0))
				processP1();
			if(x == x_g && y == y_g && random() == 0)
				z = 1;
			if(z == 1 && random() == 0)
				return;
		
		assume(false);
		return;
    
    }
    
    private void processP1()
    requires 0 < x0 && 0 < y0 && 0 < x && 0 < y && x <= x0 && y <= y0;
    modifies this.x, this.y, this.0;
    ensures x0 == old(x0) && y0 == old(y0) && y == old(y);
    ensures 0 < x && x <= old(x) && (x < old(x) ==> old(x) > old(y));
    ensures forall{g in (1: Min(x0, y0)+1), x0 % g == 0, y0 % g == 0; x % g == 0 && y % g == 0 && g <= x && g <= y};
 	{
    
		int x_g, y_g, x0_g, y0_g;
		int z, t1, t2;
		x_g = x;
		y_g = y;
		x0_g = x0;
		y0_g = y0;
		
		x = x0;
		y = y0;
		z = 0;
		
		
			if((z != 1) && (random() == 0))
				processP2();
			if(x == x_g && y == y_g && random() == 0)
				z = 1;
			if(z == 1 && random() == 0)
				return;
		
		t1 = x;
		
			if((z != 1) && (random() == 0))
				processP2();
			if(x == x_g && y == y_g && random() == 0)
				z = 1;
			if(z == 1 && random() == 0)
				return;
		
		t2 = y;
		
			if((z != 1) && (random() == 0))
				processP2();
			if(x == x_g && y == y_g && random() == 0)
				z = 1;
			if(z == 1 && random() == 0)
				return;
		
		while(t1 != t2)
		invariant y0 == y0_g && x0 == x0_g;
   		invariant z == 1 ==> y == y_g; 
   		invariant 0 < x0 && 0 < y0 && 0 < y && y <= t2 && t2 <= y0 && 0 < t2 && 0 < x && x == t1 && 0 < t1 && x <= x0;
		invariant z == 1 ==> (x <= x_g && (x < x_g ==> x_g > y_g));
   		invariant forall{g in (1: Min(x0, y0)+1), x0 % g == 0, y0 % g == 0; t1 % g == 0 && t2 % g == 0 && g <= t1 && g <= t2};
   		invariant forall{g in (1: Min(x0, y0)+1), x0 % g == 0, y0 % g == 0; x % g == 0 && y % g == 0 && g <= x && g <= y};
   		{
		
				if((z != 1) && (random() == 0))
					processP2();
				if(x == x_g && y == y_g && random() == 0)
					z = 1;
				if(z == 1 && random() == 0)
					return;
			
			if(t1 > t2)
			{
			
					if((z != 1) && (random() == 0))
						processP2();
					if(x == x_g && y == y_g && random() == 0)
						z = 1;
					if(z == 1 && random() == 0)
						return;
			
				assert(forall{g in (1: Min(x0, y0)+1), x0 % g == 0, y0 % g == 0; t1 % g == 0 && t2 % g == 0 && x % g == 0 && y % g == 0 && g <= t1 && g <= t2 && g <= x && g <= y});
				t1 = t1 - t2;
				assume(forall{g in (1: Min(x0, y0)+1), x0 % g == 0, y0 % g == 0; t1 % g == 0 && t2 % g == 0 && x % g == 0 && y % g == 0 && g <= t1 && g <= t2 && g <= x && g <= y});
			
					if((z != 1) && (random() == 0))
						processP2();
					if(x == x_g && y == y_g && random() == 0)
						z = 1;
					if(z == 1 && random() == 0)
						return;
				
				x = t1;
				
					if((z != 1) && (random() == 0))
						processP2();
					if(x == x_g && y == y_g && random() == 0)
						z = 1;
					if(z == 1 && random() == 0)
						return;
			
			}
			
			t2 = y;
			
		}
		
			if((z != 1) && (random() == 0))
				processP2();
			if(x == x_g && y == y_g && random() == 0)
				z = 1;
			if(z == 1 && random() == 0)
				return;
		
		assert(forall{g in (1: Min(x0, y0)+1), x0 % g == 0, y0 % g == 0; t1 % g == 0 && t2 % g == 0 && g <= t1 && g <= t2});
		assert(t1 == t2);
		
		assume(false);
		return;
    }
    
    public void main(string![]! args)
    {
		x = x0 = 10;
		y = y0 = 4;
		processP1();
    }
    
}
